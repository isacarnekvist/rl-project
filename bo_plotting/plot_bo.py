import numpy as np
import matplotlib.pyplot as plt
#-----------------------------------------------------
# Step |   Time |      Value |        z4 |        z7 | 
#    1 | 00m22s |   -5.55731 |   -0.3056 |    0.4227 | 
#    2 | 00m23s |   -3.95120 |   -0.9268 |    0.1826 | 
#    3 | 00m25s |   -8.78354 |   -0.4027 |    1.1460 | 
#    4 | 00m22s |   -3.67776 |   -0.5810 |    0.0329 | 
#    5 | 00m22s |   -4.23682 |    0.7023 |   -1.8239 | 
#    6 | 00m25s |   -1.52660 |    0.1725 |   -0.8765 | 
#    7 | 00m22s |   -5.10244 |    0.5389 |    0.2220 | 
#    8 | 00m22s |   -8.21209 |    0.3151 |    1.1313 | 
#Bayesian Optimization
#-----------------------------------------------------
# Step |   Time |      Value |        z4 |        z7 | 
#    9 | 00m27s |   -7.50388 |   -2.0000 |   -2.0000 | 
#   10 | 00m24s |   -9.27131 |    2.0000 |    2.0000 | 
#   11 | 00m24s |   -1.08390 |    2.0000 |   -1.0645 | 
#   12 | 00m28s |   -3.46197 |    2.0000 |   -2.0000 | 
#   13 | 00m24s |   -3.21082 |    2.0000 |   -0.4737 | 
#   14 | 00m24s |  -10.41039 |   -2.0000 |    2.0000 | 
#   15 | 00m27s |   -0.95525 |    1.6892 |   -1.1168 | 
#   16 | 00m25s |   -0.95121 |    1.0929 |   -0.9298 | 
#   17 | 00m25s |   -0.93411 |    1.3890 |   -0.9687 | 
#   18 | 00m28s |   -1.01371 |    1.2964 |   -1.0915 | 
#   19 | 00m26s |   -1.00664 |    0.7340 |   -0.8342 | 
#   20 | 00m26s |   -0.74021 |    1.5639 |   -1.0252 | 
#   21 | 00m28s |   -0.85580 |   -2.0000 |   -0.2502 | 
#   22 | 00m25s |   -2.09162 |   -2.0000 |    0.0850 | 
#   23 | 00m25s |   -1.87112 |   -1.5974 |   -0.5787 | 
#   24 | 00m27s |   -2.05315 |   -2.0000 |   -0.5447 | 
#   25 | 00m25s |   -3.16635 |   -0.5941 |   -1.0358 | 
#   26 | 00m25s |   -0.91952 |   -1.7388 |   -0.2332 | 
#   27 | 00m29s |   -0.75444 |    1.6818 |   -0.9416 | 
#   28 | 00m25s |   -3.25174 |    0.8052 |   -1.0437 |

values = [-5.55731, 
		  -3.95120, 
		  -8.78354, 
		  -3.67776, 
		  -4.23682, 
		  -1.52660, 
		  -5.10244, 
		  -8.21209, 
		  -7.50388, 
		  -9.27131, 
		  -1.08390, 
		  -3.46197, 
		  -3.21082, 
		  -10.41039, 
		  -0.95525, 
		  -0.95121, 
		  -0.93411, 
		  -1.01371, 
		  -1.00664, 
		  -0.74021, 
		  -0.85580, 
		  -2.09162, 
		  -1.87112, 
		  -2.05315, 
		  -3.16635, 
		  -0.91952, 
		  -0.75444, 
		  -3.25174]

max_value = -np.inf
max_values = []
for value in values:
	if value > max_value:
		max_value = value
	max_values.append(max_value)

for i in range(len(values), len(values) + 1):
    plt.figure(figsize=(4, 3))
    if i > 1:
        plt.plot(max_values[:i], label='max. return')
    else:
        plt.plot(max_values[:i], '.', label='max. return')
    plt.plot(values[:i], 'o', label='trial return', fillstyle='none')
    plt.ylim(-12, 0)
    plt.xlim(-1, len(values))
    plt.ylabel('Return')
    plt.xlabel('Trial #')
    plt.axvspan(-1, 8, facecolor='green', alpha=0.2)
    plt.legend()
    plt.tight_layout()
    plt.savefig(f'bayes_opt_plot_real.pdf')
    plt.show()
